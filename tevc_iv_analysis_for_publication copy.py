# -*- coding: utf-8 -*-
"""TEVC_IV_analysis_for_PUBLICATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g4aambnBiDeW0Xm1IiycqNdlN_xqZCE-

# **TEVC - Selectivity**

## Set up libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import scipy.optimize as opt
from scipy import stats
import glob as glob
import matplotlib.ticker as ticker
# %config InlineBackend.figure_format = 'retina'

"""## Import and prepare data

### Mount google drive (optional)

comment out if you want to load data from hard drive
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

"""### Import Files

Import all files from specified folder and combine into one dataframe called 'df'
"""

all_data = pd.DataFrame()
for f in glob.glob(r'drive/My Drive/your_path_here/*.xlsx'):
    df = pd.read_excel(f)
    all_data = all_data.append(df,ignore_index=True)
    
df = all_data

df.shape
#df.head()

#plot and view the raw data for each oocyte
sns.set(style="ticks", color_codes=True)

g = sns.FacetGrid(df, col="Oocyte", hue="Buffer", col_wrap=3, height=3, legend_out=True)
g = (g.map(plt.plot, "Voltage", "Current", marker="."))

g.map(plt.axhline, y=0, ls=":", c=".5")
g.map(plt.axvline, x=0, ls=":", c=".5")

g.add_legend()

"""### Remove excess coloumns and clean data
Here we are keeping only the relevant information, you can add or remove coloumns as you like.
We will also be standardising the units and generally cleaning up the data
"""

data =  df[['Time'] + ['Inj. ID 1'] + ['Oocyte'] + ['Buffer'] + ['Comp. 1'] + ['conc. 1'] + ['unit 1'] + ['Current'] + ['Voltage'] + ['Start Date'] + ['IV Prot.']]
data.shape

#here you can rename your coloumns for ease of use
data = data.rename(columns={'conc. 1': 'Concentration'})
data = data.rename(columns={'Voltage': 'Current1'})
data = data.rename(columns={'Current': 'Voltage'})
data = data.rename(columns={'Current1': 'Current'})
data.head(5)

data =  data[['Time'] + ['Inj. ID 1'] + ['Oocyte'] + ['Buffer'] + ['Comp. 1'] + ['Current'] + ['Voltage'] + ['Concentration'] + ['Start Date']]
data.reset_index(drop=True)
data.head()

data = data.rename(columns={'Comp. 1': 'Agonist'})  
data = data.rename(columns={'Current': 'Response'})    

data.head()
#data.info()

"""## Calculate I/Imax for each oocyte"""

maxvalues = data.groupby(['Oocyte']).min()["Response"]
normdata = pd.merge(data, maxvalues,  how='left', left_on=['Oocyte'], right_on = ['Oocyte'])
data['Norm_Response'] = - normdata['Response_x'] / normdata['Response_y']

data = data.drop(columns=['Response'])
data = data.rename(columns={'Norm_Response': 'Response'})  
data.head()

"""## Remove time before and after ramp protocol 650 - 8400 ms"""

#here you can optionally remove the time before and after the protocl, will need to be adjusted for your data
data = data.loc[(data['Time'] >= 650)]
data = data.loc[(data['Time'] <= 8400)]
data.shape

"""## Calculate baseline subtracted responses for each oocyte and each buffer

comment out if you do **NOT** want to normalise your data
"""

data_leak = data.loc[(data.Concentration == '0') | (data.Agonist == 'empty')]
data_leak.shape

data_agonist = data.loc[(data.Concentration != '0') & (data.Agonist != 'empty')]
data_agonist.shape

normdata = pd.merge(data_agonist, data_leak,  how='left', left_on=['Oocyte','Buffer', 'Time'], right_on = ['Oocyte','Buffer', 'Time'])

normdata['Response'] = normdata['Response_x'] - normdata['Response_y']

normdata = normdata.rename(columns={'Agonist_x': 'Agonist', 'Concentration_x' : 'Concentration', 'Voltage_x' : 'Voltage', 'Inj. ID 1_x' : 'Injection_ID', 'Start Date_x' : 'Date'}) 
normdata = normdata.drop(columns=['Inj. ID 1_y', 'Response_y', 'Response_x', 'Start Date_y'])
normdata = normdata.drop(columns=['Agonist_y', 'Concentration_y', 'Voltage_y'])

normdata.head()

"""#Plot individual oocyte IVs & exclude outliers and bad data

Here we are plotting individual oocyte IVs so that we can visually check the data and determine if any oocytes need to be ommited due to technical issues.
"""

sns.set(style="ticks", color_codes=True)

g = sns.FacetGrid(normdata, col="Oocyte", hue="Buffer", col_wrap=3, height=4)
g = (g.map(plt.plot, "Voltage", "Response", marker=".")
    .add_legend())

g.map(plt.axhline, y=0, ls=":", c=".5")
g.map(plt.axvline, x=0, ls=":", c=".5")

"""### Exclude specific oocytes (optional)
Use the code below to exclude data for indivdiual oocytes
"""

#normdata = normdata[~normdata['Oocyte'].isin(['1'])]
normdata.shape

"""#Line fit & clalculate reversal shifts

## Line fit and plot
"""

normdata = normdata.set_index('Oocyte')

#split the dataframe by buffer
data_ND96 = normdata.loc[normdata['Buffer'] == 'ND96']
data_NMDG = normdata.loc[normdata['Buffer'] == 'NMDG']
data_Gluc = normdata.loc[normdata['Buffer'] == 'Gluconate']

#line fit
data_ND96['fit'] = data_ND96.groupby('Oocyte').apply(lambda x: np.polyfit(x.Voltage, x.Response, 2))
data_NMDG['fit'] = data_NMDG.groupby('Oocyte').apply(lambda x: np.polyfit(x.Voltage, x.Response, 2))
data_Gluc['fit'] = data_Gluc.groupby('Oocyte').apply(lambda x: np.polyfit(x.Voltage, x.Response, 2))

"""## Calculate Erev"""

data_ND96[['a', 'b', 'c']] = data_ND96.fit.apply(pd.Series)
data_ND96['d'] = (data_ND96.b**2) - (4*data_ND96.a*data_ND96.c)
data_ND96['Erev_ND96'] = (-data_ND96['b'] + np.sqrt((data_ND96['d'])))/(2*data_ND96['a'])

data_NMDG[['a', 'b', 'c']] = data_NMDG.fit.apply(pd.Series)
data_NMDG['d'] = (data_NMDG.b**2) - (4*data_NMDG.a*data_NMDG.c)
data_NMDG['Erev_NMDG'] = (-data_NMDG['b'] + np.sqrt((data_NMDG['d'])))/(2*data_NMDG['a'])

data_Gluc[['a', 'b', 'c']] = data_Gluc.fit.apply(pd.Series)
data_Gluc['d'] = (data_Gluc.b**2) - (4*data_Gluc.a*data_Gluc.c)
data_Gluc['Erev_Gluc'] = (-data_Gluc['b'] + np.sqrt((data_Gluc['d'])))/(2*data_Gluc['a'])

Erev_ND96 = data_ND96.groupby('Oocyte').mean()
Erev_NMDG = data_NMDG.groupby('Oocyte').mean()
Erev_Gluc = data_Gluc.groupby('Oocyte').mean()

#combine all Erev data from each solution
Erev_ND96 = Erev_ND96.reset_index()
Erev_NMDG = Erev_NMDG.reset_index()
Erev_Gluc = Erev_Gluc.reset_index()

Erev = pd.merge(Erev_ND96,Erev_NMDG,on="Oocyte")
Erev = pd.merge(Erev,Erev_Gluc,on="Oocyte")

Erev = Erev.filter(regex='Erev_', axis=1)

Erev['Oocyte'] = Erev_ND96['Oocyte']

Erev.head()

"""## Calculate Erev shift"""

Erev['NMDG_shift'] = Erev['Erev_NMDG'] - Erev['Erev_ND96']
Erev['Gluc_shift'] = Erev['Erev_Gluc'] - Erev['Erev_ND96']

Erev = Erev.set_index('Oocyte')

Erev.head(12)

#calculate and show mean, SD, n for each coloumn
Erev.describe()

"""# Export as .csv
comment out if you do not want to export .csv
change path and file name before running

exports Erevs into a new .csv file
"""

export = Erev #choose data to export

#export.head() #show exported data

#plot.to_csv(r'drive/export_location/filename.csv')

"""# Plot example trace
Here you can plot the trace for your most representative oocyte as well as change perferences for axes colours etc.
"""

#select your oocyte to plot
plot = normdata.loc[2]

#apply an optoinal filter to the data
plot['Voltage_MA'] = plot['Voltage'].rolling(window=10).mean()
plot['Response_MA'] = plot['Response'].rolling(window=10).mean()

plot = plot.dropna()

plot = plot.drop_duplicates(subset='Voltage', keep="first")

plot.shape

#plot the graph
g = sns.lineplot(x="Voltage_MA", y="Response_MA",
                hue="Buffer", dashes=False, data=plot, legend='full')

#Give the axes labels
g.set(xlabel = "Voltage (mV)", ylabel = "I/Imax")

#Move the axes to intersect at 0,0
g.spines['left'].set_position('zero')
g.spines['bottom'].set_position('zero')

#Set the axes limits and title
g.set_title('GRAPH TITLE', y =1.05) 
g.set_ylim([-0.7, 0.4])
g.set_xlim([-80, 50])

#Move the axes labels
g.xaxis.labelpad = 150
g.yaxis.labelpad = 200

#Set major and minor axes ticks
g.xaxis.set_major_locator(ticker.MultipleLocator(20))
g.xaxis.set_major_formatter(ticker.FormatStrFormatter('%d'))
g.xaxis.set_minor_locator(ticker.MultipleLocator(5))

g.yaxis.set_major_locator(ticker.MultipleLocator(0.5))
g.yaxis.set_major_formatter(ticker.ScalarFormatter(useMathText=True))
g.yaxis.set_minor_locator(ticker.MultipleLocator(0.1))

#Set legened position and title
g.legend(loc='center left', bbox_to_anchor=(1, 0.5))

sns.despine()

#right click to download image